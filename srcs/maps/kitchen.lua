-- local fstmap = {}

-- fstmap.grid = {
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,
-- 	00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00
-- }

local kitchen = {}

kitchen.grid = {
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
	0,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,6,0,
	0,7,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,17,0,
	0,8,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,18,0,
	0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,19,0,
	0,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,19,0,
	0,10,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,20,0,
	0,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,21,0,
	0,11,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,21,0,
	0,12,13,13,13,13,13,13,13,13,13,13,14,1,1,15,13,13,16,0
	
}

function kitchenUpdate(dt, playerPosX, playerPosY)
	if check_collision(playerPosX - (tile.sizeX / 2), playerPosY - (tile.sizeY / 2), tile.sizeX, tile.sizeY, 3*tile.sizeX, 8.5*tile.sizeY, 14*tile.sizeX, 3.5*tile.sizeY) or 
	check_collision(playerPosX - (tile.sizeX / 2), playerPosY - (tile.sizeY / 2), tile.sizeX, tile.sizeY, 13.75*tile.sizeX, 12.5*tile.sizeY, 0.5*tile.sizeX, 0.5*tile.sizeY) then
		return 1
	else
		return 0
	end
end

function kitchenDraw()
	i = 1
	for y = 1, screenConf.sizeY, 1 do
		for x = 1, screenConf.sizeX, 1 do
			tile_id = kitchen.grid[i]
			love.graphics.setDefaultFilter("nearest","nearest")
			love.graphics.draw(kitchenGetsTileById(tile_id), (x - 1) * tile.sizeX, (y - 1) * tile.sizeY)
			i = i + 1
		end
	end
	love.graphics.rectangle("line", 3*tile.sizeX, 8.5*tile.sizeY, 14*tile.sizeX, 3.5*tile.sizeY)
	love.graphics.rectangle("line", 13.75*tile.sizeX, 12.5*tile.sizeY, 0.5*tile.sizeX, 0.5*tile.sizeY)
end

return kitchen
